Here's a detailed breakdown of the upload page components, their props, and states:

1. `UploadPage` (app/upload/page.tsx)


```typescript
Props:
- uploadType?: boolean

Components Used:
- UploadChoice
```

2. `UploadChoice` (components/upload/upload-choice.tsx)


```typescript
States:
- uploadType: 'album' | 'individual' | null

Components Used:
- Card, CardContent, CardDescription, CardHeader, CardTitle
- Button
- ContentUpload
```

3. `ContentUpload` (components/upload/content-upload.tsx)


```typescript
Props:
- uploadType: 'album' | 'individual'
- onBack: () => void

States:
- albumDetails: {
    title: string
    description: string
    releaseDate: string
  }
- files: any[]
- error: string | null
- step: 'upload' | 'details'

Components Used:
- TechnicalRequirements
- ContentList
- QAProcess
- TrackDetailsStep
```

4. `TrackDetailsStep` (components/upload/track-details-step.tsx)


```typescript
Props:
- files: any[]
- albumId: string | null
- onBack: () => void

States:
- currentTrackIndex: number
- isSubmitting: boolean
- trackDetails: Array<{
    title: string
    description: string
    category: string
    genre: string[]
    featuredInstruments: string[]
    primaryInstrument: string
    language: string[]
    deity: string[]
    tradition: string[]
    vocals: string
    vocalTypes: {
      male: boolean
      female: boolean
      choir: boolean
      circle: boolean
    }
  }>

Components Used:
- Button, Input, Label, Textarea, Card, CardContent, Checkbox
- Select (react-select)
```

5. `ContentList` (components/upload/content-list.tsx)


```typescript
Props:
- files: any[]
- isAlbum: boolean
- onRemove: (id: string) => void
- onReorder: (files: any[]) => void

Components Used:
- Card, CardContent
- Button
- DragDropContext, Draggable, Droppable (react-beautiful-dnd)
```

6. `TechnicalRequirements` (components/upload/technical-requirements.tsx)


```typescript
Props: none

Static component displaying requirements
```

7. `QAProcess` (components/upload/qa-process.tsx)


```typescript
Props: none

Components Used:
- Card, CardContent, CardDescription, CardHeader, CardTitle
```

8. `UploadContent` (components/upload/upload-content.tsx)


```typescript
States:
- currentStep: UploadStep (1 | 2)
- uploadedFiles: UploadedFile[]
- albumId: string | null

Type Definitions:
- UploadedFile = File & { 
    id: string
    progress: number 
  }

Components Used:
- UploadStep
- TrackDetailsStep
- Progress
```

Key Features and Interactions:

1. File Upload Flow:

1. Drag and drop support
2. Progress tracking
3. File type validation
4. Multiple file handling



2. Metadata Management:

1. Comprehensive form fields
2. Multi-select capabilities
3. Category management
4. Validation



3. Navigation:

1. Step tracking
2. Back/forward navigation
3. Progress indication



4. Album Specific Features:

1. Album details collection
2. Track ordering
3. Batch processing



5. Form Validation and Submission:

1. File type checking
2. Required field validation
3. Submission handling
4. Error management





The components form a hierarchical structure with `UploadPage` at the root, branching into either album or individual upload flows, with shared components for technical requirements and quality assurance information.