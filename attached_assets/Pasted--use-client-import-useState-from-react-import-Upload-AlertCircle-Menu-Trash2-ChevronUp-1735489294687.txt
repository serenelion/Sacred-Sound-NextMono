'use client'

import { useState } from 'react'
import { Upload, AlertCircle, Menu, Trash2, ChevronUp, Play, X } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import { Progress } from "@/components/ui/progress"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import ReactSelect from 'react-select'
import { UploadStep, UploadedTrack, TrackDetails, AlbumDetails } from '@/app/types'
import { METADATA_OPTIONS, VOCAL_TYPES } from '@/lib/constants'

interface UploadContentProps {
  onClose: () => void
}

const selectStyles = {
  control: (base: any) => ({
    ...base,
    backgroundColor: 'white',
    borderColor: 'rgb(226, 232, 240)',
    borderRadius: '0.5rem',
    minHeight: '40px',
    boxShadow: 'none',
    '&:hover': {
      borderColor: 'rgb(148, 163, 184)'
    }
  }),
  menu: (base: any) => ({
    ...base,
    backgroundColor: 'white',
    borderRadius: '0.5rem',
    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
  }),
  option: (base: any, state: any) => ({
    ...base,
    backgroundColor: state.isSelected ? 'rgb(243, 244, 246)' : 'white',
    color: 'black',
    '&:hover': {
      backgroundColor: 'rgb(243, 244, 246)',
    }
  }),
  multiValue: (base: any) => ({
    ...base,
    backgroundColor: 'rgb(243, 244, 246)',
    borderRadius: '0.375rem',
  }),
}

export function UploadContent({ onClose }: UploadContentProps) {
  const [currentStep, setCurrentStep] = useState<UploadStep>('upload')
  const [isCreatingAlbum, setIsCreatingAlbum] = useState(false)
  const [uploadedFiles, setUploadedFiles] = useState<UploadedTrack[]>([])
  const [dragActive, setDragActive] = useState(false)
  const [uploadProgress, setUploadProgress] = useState(0)
  const [currentTrackIndex, setCurrentTrackIndex] = useState(0)
  const [albumDetails, setAlbumDetails] = useState<AlbumDetails>({
    title: '',
    description: '',
    visibility: 'public'
  })
  const [trackDetails, setTrackDetails] = useState<TrackDetails[]>([])

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true)
    } else if (e.type === "dragleave") {
      setDragActive(false)
    }
  }

  const validateFile = (file: File) => {
    const validAudioTypes = ['audio/wav', 'audio/flac', 'audio/aiff']
    const validVideoTypes = ['video/mp4']
    
    if (!validAudioTypes.includes(file.type) && !validVideoTypes.includes(file.type)) {
      return 'Incorrect file type'
    }
    return null
  }

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    setDragActive(false)
    const files = Array.from(e.dataTransfer.files)
    handleFiles(files)
  }

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files ? Array.from(e.target.files) : []
    handleFiles(files)
  }

  const handleFiles = (files: File[]) => {
    const newTracks = files.map(file => ({
      id: Math.random().toString(36).substr(2, 9),
      file,
      name: file.name,
      error: validateFile(file)
    }))

    setUploadedFiles(prev => [...prev, ...newTracks])
    simulateUpload()
    
    // Initialize track details for new files
    setTrackDetails(prev => [
      ...prev,
      ...files.map(() => ({
        title: '',
        description: '',
        visibility: 'public',
        category: '',
        genre: [],
        featuredInstruments: [],
        primaryInstrument: '',
        language: [],
        mood: '',
        deity: [],
        vibe: [],
        tradition: [],
        vocals: 'no',
        vocalTypes: {
          male: false,
          female: false,
          choir: false,
          circle: false,
        }
      }))
    ])

    // Auto-progress after upload
    setTimeout(() => {
      setCurrentStep(isCreatingAlbum ? 'album-details' : 'track-details')
    }, 2000)
  }

  const simulateUpload = () => {
    setUploadProgress(0)
    const interval = setInterval(() => {
      setUploadProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval)
          return 100
        }
        return prev + 10
      })
    }, 500)
  }

  const updateCurrentTrack = (updates: Partial<TrackDetails>) => {
    setTrackDetails(prev => prev.map((track, i) => 
      i === currentTrackIndex ? { ...track, ...updates } : track
    ))
  }

  const handlePublish = () => {
    // Here you would typically send the data to your backend
    const finalData = {
      isAlbum: isCreatingAlbum,
      albumDetails: isCreatingAlbum ? albumDetails : null,
      tracks: uploadedFiles.map((file, index) => ({
        file: file.name,
        ...trackDetails[index]
      }))
    }
    
    console.log('Publishing:', finalData)
    onClose()
  }

  const renderUploadStep = () => (
    <div className="max-w-4xl mx-auto p-8 space-y-12">
      <div className="space-y-6">
        <h1 className="text-4xl font-serif text-[#5046E5]">Upload your audio/video files</h1>
        <p className="text-lg text-[#4A5568] max-w-2xl">
          To ensure the highest audio quality for your project, all uploaded files must meet the following technical standards:
        </p>
      </div>

      <div 
        className={`
          border-2 border-dashed rounded-2xl p-16
          ${dragActive ? 'border-[#5046E5] bg-[#5046E5]/5' : 'border-[#5046E5]/30'}
          transition-all duration-300 ease-in-out
          hover:border-[#5046E5] hover:bg-[#5046E5]/5
        `}
        onDragEnter={handleDrag}
        onDragLeave={handleDrag}
        onDragOver={handleDrag}
        onDrop={handleDrop}
      >
        <div className="flex flex-col items-center justify-center space-y-6">
          <div className="w-16 h-16 rounded-full bg-[#5046E5]/10 flex items-center justify-center">
            <Upload className="w-8 h-8 text-[#5046E5]" />
          </div>
          <div className="text-center space-y-2">
            <p className="text-xl font-medium text-[#2D2D2D]">Drag & drop files to get started</p>
            <p className="text-sm text-[#4A5568]">or</p>
            <Button 
              onClick={() => document.getElementById('file-upload')?.click()}
              className="bg-[#5046E5] hover:bg-[#4038c7]"
            >
              Choose files
            </Button>
          </div>
          
          <div className="grid md:grid-cols-2 gap-12 mt-8 w-full max-w-2xl">
            <Card>
              <CardContent className="pt-6">
                <h3 className="font-semibold text-[#5046E5] mb-4">For audio</h3>
                <ul className="space-y-2 text-sm text-[#4A5568]">
                  <li className="flex items-center gap-2">
                    <span className="w-2 h-2 rounded-full bg-[#5046E5]" />
                    File type: WAV, FLAC, AIFF
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="w-2 h-2 rounded-full bg-[#5046E5]" />
                    Bit depth: 16-bit min
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="w-2 h-2 rounded-full bg-[#5046E5]" />
                    Sample rate: 44.1 kHz min
                  </li>
                </ul>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="pt-6">
                <h3 className="font-semibold text-[#5046E5] mb-4">For video</h3>
                <ul className="space-y-2 text-sm text-[#4A5568]">
                  <li className="flex items-center gap-2">
                    <span className="w-2 h-2 rounded-full bg-[#5046E5]" />
                    File type: MP4
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="w-2 h-2 rounded-full bg-[#5046E5]" />
                    Highest resolution :)
                  </li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      <input
        id="file-upload"
        type="file"
        multiple
        accept="audio/wav,audio/flac,audio/aiff,video/mp4"
        className="hidden"
        onChange={handleFileInput}
      />

      {uploadedFiles.length > 0 && (
        <div className="space-y-6">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-medium text-[#2D2D2D]">Selected files</h2>
            <span className="text-sm text-[#4A5568]">{uploadedFiles.length} files selected</span>
          </div>
          
          <div className="space-y-3">
            {uploadedFiles.map(track => (
              <Card key={track.id}>
                <CardContent className="flex items-center justify-between p-4">
                  <div className="flex items-center gap-4">
                    {track.error ? (
                      <div className="w-10 h-10 rounded-full bg-red-100 flex items-center justify-center">
                        <AlertCircle className="w-5 h-5 text-red-500" />
                      </div>
                    ) : (
                      <div className="w-10 h-10 rounded-full bg-[#5046E5]/10 flex items-center justify-center">
                        <Play className="w-5 h-5 text-[#5046E5]" />
                      </div>
                    )}
                    <div>
                      <p className="font-medium text-[#2D2D2D]">{track.name}</p>
                      {track.error ? (
                        <p className="text-sm text-red-500">{track.error}</p>
                      ) : (
                        <Progress value={uploadProgress} className="w-32 h-1" />
                      )}
                    </div>
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="text-[#71717A] hover:text-red-500"
                    onClick={() => {
                      setUploadedFiles(files => files.filter(f => f.id !== track.id))
                    }}
                  >
                    <Trash2 className="w-5 h-5" />
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="flex items-center pt-6 border-t">
            <div className="flex items-center gap-2">
              <Checkbox
                id="album"
                checked={isCreatingAlbum}
                onCheckedChange={(checked) => setIsCreatingAlbum(checked as boolean)}
              />
              <label 
                htmlFor="album" 
                className="text-sm font-medium text-[#4A5568] cursor-pointer hover:text-[#2D2D2D]"
              >
                Create an album instantly with multiple selections
              </label>
            </div>
          </div>
        </div>
      )}
    </div>
  )

  const renderAlbumDetails = () => (
    <div className="max-w-4xl mx-auto p-8 space-y-8">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-semibold text-[#2D2D2D]">Album details</h1>
        <Button 
          onClick={() => setCurrentStep('track-details')}
          className="bg-[#5046E5] hover:bg-[#4038c7]"
        >
          Next
        </Button>
      </div>

      <div className="grid gap-8 md:grid-cols-2">
        <div className="space-y-8">
          <div className="aspect-square bg-[#F4F4F5] rounded-lg flex flex-col items-center justify-center gap-4 cursor-pointer hover:bg-[#E4E4E7] transition-colors">
            <Upload className="w-8 h-8 text-[#71717A]" />
            <span className="text-sm text-[#71717A]">Upload cover image</span>
          </div>

          <div className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="title">Title</Label>
              <Input
                id="title"
                placeholder="Album title"
                value={albumDetails.title}
                onChange={(e) => setAlbumDetails(prev => ({ ...prev, title: e.target.value }))}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                placeholder="Album description"
                value={albumDetails.description}
                onChange={(e) => setAlbumDetails(prev => ({ ...prev, description: e.target.value }))}
              />
            </div>

            <div className="space-y-2">
              <Label>Visibility</Label>
              <Select
                value={albumDetails.visibility}
                onValueChange={(value: 'public' | 'private') => 
                  setAlbumDetails(prev => ({ ...prev, visibility: value }))
                }
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select visibility" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="public">Public</SelectItem>
                  <SelectItem value="private">Private</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>

        <div className="space-y-4">
          <h2 className="text-lg font-semibold">Tracks from this album</h2>
          {uploadedFiles.map((track) => (
            <Card key={track.id}>
              <CardContent className="flex items-center gap-4 p-4">
                <Menu className="w-5 h-5 text-[#71717A]" />
                <span className="flex-1">{track.name}</span>
                <div className="flex items-center gap-2">
                  <Button variant="ghost" size="icon" className="hover:text-[#5046E5]">
                    <Play className="w-5 h-5" />
                  </Button>
                  <Button variant="ghost" size="icon" className="hover:text-red-500">
                    <Trash2 className="w-5 h-5" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  )

  const renderTrackDetails = () => {
    const currentTrack = uploadedFiles[currentTrackIndex]
    const currentDetails = trackDetails[currentTrackIndex]

    return (
      <div className="max-w-4xl mx-auto p-8 space-y-8">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-semibold text-[#2D2D2D]">Track details</h1>
          <Button 
            onClick={handlePublish}
            className="bg-[#5046E5] hover:bg-[#4038c7]"
          >
            Publish
          </Button>
        </div>

        <Card className="mb-8">
          <CardContent className="flex items-center gap-4 p-4">
            <Menu className="w-5 h-5 text-[#71717A]" />
            <span className="flex-1 font-medium">{currentTrack.name}</span>
            <div className="flex items-center gap-2">
              <Button variant="ghost" size="icon" className="hover:text-red-500">
                <Trash2 className="w-5 h-5" />
              </Button>
              <Button variant="ghost" size="icon">
                <ChevronUp className="w-5 h-5" />
              </Button>
            </div>
          </CardContent>
        </Card>

        <div className="grid gap-8 md:grid-cols-2">
          <div className="space-y-8">
            <div className="aspect-square bg-[#F4F4F5] rounded-lg flex flex-col items-center justify-center gap-4 cursor-pointer hover:bg-[#E4E4E7] transition-colors">
              <Upload className="w-8 h-8 text-[#71717A]" />
              <span className="text-sm text-[#71717A]">Upload cover image</span>
            </div>

            <div className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="title">Title</Label>
                <Input
                  id="title"
                  placeholder="Write a catchy title for the content"
                  value={currentDetails.title}
                  onChange={(e) => updateCurrentTrack({ title: e.target.value })}
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  placeholder="What describes this track"
                  value={currentDetails.description}
                  onChange={(e) => updateCurrentTrack({ description: e.target.value })}
                />
              </div>

              <div className="space-y-2">
                <Label>Category</Label>
                <ReactSelect
                  styles={selectStyles}
                  options={METADATA_OPTIONS.categories}
                  value={METADATA_OPTIONS.categories.find(c => c.value === currentDetails.category)}
                  onChange={(option: any) => updateCurrentTrack({ category: option?.value })}
                  placeholder="Select the content's category"
                />
              </div>
            </div>
          </div>

          <div className="space-y-6">
            <div className="space-y-2">
              <Label>Genre</Label>
              <ReactSelect
                styles={selectStyles}
                isMulti
                options={METADATA_OPTIONS.genres}
                value={METADATA_OPTIONS.genres.filter(g => currentDetails.genre?.includes(g.value))}
                onChange={(options: any) => updateCurrentTrack({ 
                  genre: options.map((o: any) => o.value)
                })}
                placeholder="Select genres"
              />
            </div>

            <div className="space-y-2">
              <Label>Featured instruments</Label>
              <ReactSelect
                styles={selectStyles}
                isMulti
                options={METADATA_OPTIONS.instruments}
                value={METADATA_OPTIONS.instruments.filter(i => 
                  currentDetails.featuredInstruments?.includes(i.value)
                )}
                onChange={(options: any) => updateCurrentTrack({ 
                  featuredInstruments: options.map((o: any) => o.value)
                })}
                placeholder="Select featured instruments"
              />
            </div>

            <div className="space-y-2">
              <Label>Primary instrument</Label>
              <ReactSelect
                styles={selectStyles}
                options={METADATA_OPTIONS.instruments}
                value={METADATA_OPTIONS.instruments.find(i => 
                  i.value === currentDetails.primaryInstrument
                )}
                onChange={(option: any) => updateCurrentTrack({ 
                  primaryInstrument: option?.value
                })}
                placeholder="Select primary instrument"
              />
            </div>

            <div className="space-y-2">
              <Label>Language</Label>
              <ReactSelect
                styles={selectStyles}
                isMulti
                options={METADATA_OPTIONS.languages}
                value={METADATA_OPTIONS.languages.filter(l => 
                  currentDetails.language?.includes(l.value)
                )}
                onChange={(options: any) => updateCurrentTrack({ 
                  language: options.map((o: any) => o.value)
                })}
                placeholder="Select languages"
              />
            </div>

            <div className="space-y-2">
              <Label>Deity</Label>
              <ReactSelect
                styles={selectStyles}
                isMulti
                options={METADATA_OPTIONS.deities}
                value={METADATA_OPTIONS.deities.filter(d => 
                  currentDetails.deity?.includes(d.value)
                )}
                onChange={(options: any) => updateCurrentTrack({ 
                  deity: options.map((o: any) => o.value)
                })}
                placeholder="Select deities"
              />
            </div>

            <div className="space-y-2">
              <Label>Tradition</Label>
              <ReactSelect
                styles={selectStyles}
                isMulti
                options={METADATA_OPTIONS.traditions}
                value={METADATA_OPTIONS.traditions.filter(t => 
                  currentDetails.tradition?.includes(t.value)
                )}
                onChange={(options: any) => updateCurrentTrack({ 
                  tradition: options.map((o: any) => o.value)
                })}
                placeholder="Select traditions"
              />
            </div>

            <div className="space-y-4">
              <Label>Vocals</Label>
              <div className="grid gap-4">
                {VOCAL_TYPES.map((type) => (
                  <div key={type.id} className="flex items-center space-x-3">
                    <Checkbox
                      id={type.id}
                      checked={type.id === 'instrumental' 
                        ? currentDetails.vocals === 'no'
                        : currentDetails.vocalTypes?.[type.id as keyof typeof currentDetails.vocalTypes]
                      }
                      onCheckedChange={(checked) => {
                        if (type.id === 'instrumental') {
                          updateCurrentTrack({ 
                            vocals: checked ? 'no' : 'yes',
                            vocalTypes: {
                              male: false,
                              female: false,
                              choir: false,
                              circle: false,
                            }
                          })
                        } else {
                          updateCurrentTrack({
                            vocals: 'yes',
                            vocalTypes: {
                              ...currentDetails.vocalTypes,
                              [type.id]: checked
                            }
                          })
                        }
                      }}
                    />
                    <Label htmlFor={type.id}>{type.label}</Label>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        <div className="mt-8 space-y-2">
          {uploadedFiles.map((track, index) => (
            <Card
              key={track.id}
              className={`
                hover:shadow-md transition-shadow cursor-pointer
                ${index === currentTrackIndex ? 'bg-[#5046E5]/10 border-[#5046E5]' : ''}
              `}
              onClick={() => setCurrentTrackIndex(index)}
            >
              <CardContent className="flex items-center gap-4 p-4">
                <Menu className="w-5 h-5 text-[#71717A]" />
                <span className="flex-1 font-medium">{track.name}</span>
                <div className="flex items-center gap-2">
                  <Button variant="ghost" size="icon" className="hover:text-red-500">
                    <Trash2 className="w-5 h-5" />
                  </Button>
                  <Button variant="ghost" size="icon">
                    <ChevronUp className="w-5 h-5" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="h-full bg-[#FAFAFA] relative overflow-auto">
      <Button
        variant="ghost"
        size="icon"
        className="fixed top-4 right-4 z-50 hover:bg-black/5"
        onClick={onClose}
      >
        <X className="w-5 h-5" />
      </Button>

      {currentStep === 'upload' && renderUploadStep()}
      {currentStep === 'album-details' && renderAlbumDetails()}
      {currentStep === 'track-details' && renderTrackDetails()}
    </div>
  )
}

